package eu.wdaqua.nell2rdf;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import eu.wdaqua.nell2rdf.extract.ExtractNell;
import org.apache.jena.rdf.model.Model;
import org.apache.log4j.Logger;

import eu.wdaqua.nell2rdf.beans.NellModel;
import eu.wdaqua.nell2rdf.extract.WriteNell;
import eu.wdaqua.nell2rdf.utils.NellMapper;

/**
 * Main class of the program that provides {@link #main(String[])}.
 *
 * @author Christophe Gravier & Quentin Cruzille & Jose M. Gimenez-Garcia
 */
public class NellOntologyConverter {

    public static final String  XML                 = "RDF/XML";
    public static final String  XML_ABBREV          = "RDF/XML-ABBREV";
    public static final String  NTRIPLES            = "N-TRIPLE";
	public static final String	TURTLE				= "TURTLE";
	public static final String  TTL                 = "TTL";
    public static final String	N3					= "N3";

	public static final String	NONE				= "NONE";
	public static final String	REIFICATION			= "REIFICATION";
	public static final String	N_ARY				= "N-ARY";
	public static final String	QUADS				= "QUADS";
	public static final String	SINGLETON_PROPERTY	= "SINGLETON-PROPERTY";

	public static Logger		log					= Logger.getLogger(NellOntologyConverter.class);

	/**
	 * Input file containing the NELL ontology.
	 */
	private String ontologyFile;

	/**
	 * Prefix to use when creating new triples in Nell XML model.
	 */
	private String prefix;

	/**
	 * Output serialization format.
	 */
	private String		format;

	/**
	 * Model to represent meta-data.
	 */
	private final String		metadata;

	/**
	 * Output file to create.
	 */
	private final String		rdfFileName;

	/**
	 * In-memory representation of the Nell CSV ontology (collection of subject/object for all possible predicate.)
	 */
	private NellModel nellOntologyModel = new NellModel();

	/**
	 * Generate and dump a Jena model out of a Nell ontology.
	 * @param csvFileName comma-separated Nell ontology file as generated by CMU team.
	 * @param prefix prefix to the ontology.
	 * @param rdfFileName Absolute path to the turtle file where to serialize the Jena ontology as turtle on the filesystem.
	 */
	public NellOntologyConverter(final String prefix, final String format, final String metadata, final String csvFileName, final String rdfFileName) {
		super();
		this.prefix = prefix;
		this.format = format;
		this.metadata = metadata;
		this.ontologyFile = csvFileName;
		this.rdfFileName = rdfFileName;
	}

	/**
	 * Create a Jena model for this Nell in-memory ontology.
	 * @return Nell ontology as a Jena model.
	 */
	public Model convert() {
		log.info("Loading NELL ontology into memory ...");
		nellOntologyModel.createModel(this.ontologyFile);
		log.info("Done.");

		log.info("Mapping NELL ontology to a RDF model ...");
		Model nellInRDF = nellOntologyModel.mapToRDFModel(prefix);
		log.info("Done.");
		return nellInRDF;
	}

	/**
	 * Builds an information on expected program usage.
	 * @return a string specifying how to use this program.
	 */
	private static String usage() {
		StringBuffer sb = new StringBuffer();
		sb.append("--------------------------------------------------------\n" + "This is Nell to RDF converter program.\n\n" + "-----------------------------------------------------------\n"
				+ "You should call this program with the following arguments :\n");
		sb.append("1- Desired serialization format: \"RDF/XML\", \"RDF/XML-ABBREV\", \"N-TRIPLE\", \"TURTLE\", \"TTL\", \"N3\" \n");
		sb.append("2- Desired model to represent meta-data: \"none\", \"reification\", \"n-ary\", \"quads\", \"singleton-property\"\n");
		sb.append("3- Desired prefix for the ontology to create. E.g. \"http://ste-lod-crew.fr/nell/\"\n");
        sb.append("4- Desired separator after the namespace (i.e., # for hash-style or / for slash-style)\"\n");
		sb.append("5- Absolute path to nell csv ontology file. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.ontology.csv\"\n");
		sb.append("6- Absolute path where to serialize the RDF model. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.ontology.ttl\"\n");
		sb.append("7- Absolute path to nell csv instance file. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.instances.csv\"\n");
		sb.append("8- Absolute path where to serialize the RDF instances. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.instances.ttl\"\n");
		return sb.toString();
	}

	/**
	 * Checks if the program arguments are valid. For now it only checks if there are precisely 3 arguments.
	 * @param args Array of program argument as strings.
	 * @return true if the number of arguments equals 5 and the Nell csv files (args[1] and args[3] values) exists on the filesystem.
	 */
	private static boolean areSuppliedArgumentsOK(String[] args) {

		if (args.length != 8 && args.length != 9) {
			return false;
		}

		final File f = new File(args[4]);
		final File n = new File(args[6]);

		return (f.exists() && f.isFile() && n.exists() && n.isFile());
	}

	/**
	 * Program entry point.
	 * @param args such as :
	 *            <ul>
	 *            <li>args[0] : serialization format.</li>
	 *            <li>args[1] : model to represent meta-data.</li>
	 *            <li>args[2] : prefix to use.</li>
	 *            <li>args[3] : absolute path to nell ontology file on your FS.</li>
	 *            <li>args[4] : absolute path to the output turtle file to create on your FS.</li>
	 *            <li>args[5] : absolute path to the nell file on your FS.</li>
	 *            <li>args[6] : absolute path to the output turtle file for nell to create on your FS.</li>
	 *            </ul>
	 */
	public static void main(String[] args) {

		if (!NellOntologyConverter.areSuppliedArgumentsOK(args)) {
			log.error(NellOntologyConverter.usage());
			System.exit(0);
		}

		final String format = args[0].toUpperCase();
		final String metadata = args[1].toUpperCase();
		final String prefix = args[2];
		final String separator = args[3];
		final String ontologyFile = args[4];
		final String outputFile = args[5];
		final String nellFile = args[6];
		final String outputNellToRDF = args[7];
		final String candidates = args.length == 9 ? args[8] : "false";

		// create an in-memory model of the NELL csv file.
		log.info("Build an in-memory model of Nell ontology as a CSV file...");
		final NellOntologyConverter converter = new NellOntologyConverter(prefix, format, metadata, ontologyFile, outputFile);
		log.info("Done.");

		// convert this model to a Jena model.
		log.info("Converting the Nell in-memory model to a Jena model...");
		Model nellRdfOntology = converter.convert();
		log.info("Done.");

		/*
		 * display some stats on the Jena model check that everything for leveraged by having the same stats on the NELL ontology model using ith the bash script provided at
		 * src/main/resources/printNelCsvStats)
		 */
		NellMapper.displayStats(nellRdfOntology, converter.getNellOntologyModel(), prefix);

		// dump the Jena model to file system
		log.info("Dumping ontology model to FS...");
		try {
			converter.dumpNellRdfModelToFile(nellRdfOntology);
		} catch (IOException e) {
			e.printStackTrace();
		}
		log.info("Done, Jena model dumped to " + outputFile);

		log.info("Start converting Nell instances into Jena Model");
		converter.translateNellInstancesToRDF(nellFile, outputNellToRDF, prefix, separator, Boolean.parseBoolean(candidates));
		
	}

	/**
	 * Dump Nell RDF model to filesystem.
	 * @param outputFile Absolute path of the file where to serialize the model.
	 */
	private void dumpNellRdfModelToFile(final Model nellOntology) throws IOException {
		final OutputStream outStream = new FileOutputStream(this.rdfFileName);
		nellOntology.write(outStream, "N3");
		outStream.flush();
		outStream.close();
	}

	/**
	 * From the <code>input</code> file corresponding to a Nell instances file, create as many instances using <code>prefix</code> as IRI, and then dump to <code>output</code> file.
     * @param nellInstanceFile Absolute path to a Nell instance file
     * @param rdfInstanceFile Absolute path to where to dump instances on the FS
     * @param prefix Prefix to use when creating new IRIs.
     * @param separator
     */
	private void translateNellInstancesToRDF(final String nellInstanceFile, final String rdfInstanceFile, final String prefix, String separator, boolean candidates) {

//		boolean n3 = false;
//		boolean turtle = false;
//		boolean rdf = false;

//		switch (this.format) {
//			case XML:
//				rdf = true;
//                break;
//			case TURTLE:
//				turtle = true;
//				break;
//			case N3:
//				n3 = true;
//				break;
//            case NT:case NTRIPLES:
//		}

        if (!format.equals(XML)
                && !format.equals(XML_ABBREV)
                && !format.equals(NTRIPLES)
                && !format.equals(TURTLE)
                && !format.equals(TTL)
                && !format.equals(N3)) {
            format = NTRIPLES;
        }

        log.info("Exporting triples using " + format);

		// workaround to use less memory
		final ExtractNell extract = new ExtractNell(prefix, this.metadata, separator, format, candidates, rdfInstanceFile);
		WriteNell write;
		extract.extraction(nellInstanceFile);
		//System.out.println("Model extraction Done.");
//		write = new WriteNell(extract.getTranslator().getModel(),rdf,turtle,n3, rdfInstanceFile, this.metadata);
//		write.write();
		System.out.println("Serialisation complete to "+rdfInstanceFile);
		
//		Extract extractor = new Extract(nellInstanceFile, prefix);
//		Write write;
//		log.info("Extract and translate begin from " + nellInstanceFile);
//		extractor.extraction();
//		log.info("Extract and translate done, write begin in " + rdfInstanceFile);
//		write = new Write(extractor.getTranslator().getModel(), rdfInstanceFile);
//		write.write();
//		log.info("Write done");
	}

	/** Getters and Setters */
	public NellModel getNellOntologyModel() {
		return nellOntologyModel;
	}

	public void setNellOntologyModel(NellModel nellOntologyModel) {
		this.nellOntologyModel = nellOntologyModel;
	}
}
